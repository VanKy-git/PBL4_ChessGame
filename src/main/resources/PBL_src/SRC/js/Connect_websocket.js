// ../js/Connect_websocket.js

let mainSocket = null;
const SOCKET_URL = "ws://localhost:8080";
const messageHandlers = {};
let pendingMessages = []; // ‚úÖ h√†ng ƒë·ª£i tin nh·∫Øn ch·ªù g·ª≠i khi socket ch∆∞a m·ªü

/**
 * K·∫øt n·ªëi t·ªõi WebSocket server ho·∫∑c tr·∫£ v·ªÅ socket ƒë√£ m·ªü.
 */
export function connectMainSocket() {
    if (mainSocket && mainSocket.readyState === WebSocket.OPEN) {
        return mainSocket;
    }

    // N·∫øu socket ch∆∞a t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë√≥ng th√¨ t·∫°o m·ªõi
    if (!mainSocket || mainSocket.readyState === WebSocket.CLOSED) {
        mainSocket = new WebSocket(SOCKET_URL);
    }

    mainSocket.onopen = () => {
        console.log(" ƒê√£ k·∫øt n·ªëi server ch√≠nh.");
        // G·ª≠i t·∫•t c·∫£ tin nh·∫Øn ƒëang ch·ªù
        if (pendingMessages.length > 0) {
            console.log(` G·ª≠i ${pendingMessages.length} tin nh·∫Øn ch·ªù...`);
            pendingMessages.forEach(msg => mainSocket.send(JSON.stringify(msg)));
            pendingMessages = [];
        }
    };

    mainSocket.onmessage = (event) => {
        try {
            const data = JSON.parse(event.data);
            const handler = messageHandlers[data.type];
            console.log(" Nh·∫≠n t·ª´ server:", data);

            if (handler) {
                handler(data);
            } else {
                console.warn(`[Socket] Kh√¥ng c√≥ handler ƒë∆∞·ª£c ƒëƒÉng k√Ω cho lo·∫°i: ${data.type}`);
            }
        } catch (e) {
            console.error("[Socket] L·ªói ph√¢n t√≠ch tin nh·∫Øn WebSocket:", e);
        }
    };

    mainSocket.onclose = () => console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi WebSocket");
    mainSocket.onerror = (e) => console.error("[Socket] L·ªói socket:", e);

    return mainSocket;
}

/**
 * G·ª≠i ƒë·ªëi t∆∞·ª£ng JavaScript d∆∞·ªõi d·∫°ng chu·ªói JSON qua WebSocket.
 */
export function sendMessage(messageObject) {
    if (mainSocket && mainSocket.readyState === WebSocket.OPEN) {
        mainSocket.send(JSON.stringify(messageObject));
        console.log(" G·ª≠i t·ªõi server:", messageObject);
        return true;
    }

    if (!mainSocket || mainSocket.readyState === WebSocket.CLOSED) {
        connectMainSocket();
    }

    console.warn(" Socket ch∆∞a m·ªü, th√™m v√†o h√†ng ch·ªù:", messageObject);
    pendingMessages.push(messageObject);
    return false;
}

/**
 * ƒêƒÉng k√Ω h√†m x·ª≠ l√Ω cho m·ªôt lo·∫°i tin nh·∫Øn c·ª• th·ªÉ.
 */
export function registerHandler(type, handlerFunction) {
    messageHandlers[type] = handlerFunction;
}
