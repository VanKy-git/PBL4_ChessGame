// ../js/Connect_websocket.js


let mainSocket = null;
const SOCKET_URL = "ws://localhost:8080";
const messageHandlers = {}; // ‚úÖ D√πng c√°i n√†y
let pendingMessages = [];

/**
 * K·∫øt n·ªëi t·ªõi WebSocket server ho·∫∑c tr·∫£ v·ªÅ socket ƒë√£ m·ªü.
 */
export function connectMainSocket() {
    if (mainSocket && mainSocket.readyState === WebSocket.OPEN) {
        return mainSocket;
    }
    if (!mainSocket || mainSocket.readyState === WebSocket.CLOSED) {
        mainSocket = new WebSocket(SOCKET_URL);
    }

    mainSocket.onopen = () => {
        console.log("‚úÖ ƒê√£ k·∫øt n·ªëi server ch√≠nh.");
        if (pendingMessages.length > 0) {
            console.log(` G·ª≠i ${pendingMessages.length} tin nh·∫Øn ch·ªù...`);
            pendingMessages.forEach(msg => mainSocket.send(JSON.stringify(msg)));
            pendingMessages = [];
        }
    };

    mainSocket.onmessage = (event) => {
        try {
            const msg = JSON.parse(event.data);
            console.log('Received:', msg);
            // ‚úÖ G·ªçi h√†m n·ªôi b·ªô ƒë·ªÉ ƒëi·ªÅu ph·ªëi
            handleMessage(msg);
        } catch (e) {
            console.error("[Socket] L·ªói ph√¢n t√≠ch tin nh·∫Øn WebSocket:", e);
        }
    };

    mainSocket.onclose = () => {
        console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi WebSocket");
        mainSocket = null; // ‚úÖ Reset socket
    };
    mainSocket.onerror = (e) => console.error("[Socket] L·ªói socket:", e);
    return mainSocket;
}

/**
 * G·ª≠i ƒë·ªëi t∆∞·ª£ng JavaScript d∆∞·ªõi d·∫°ng chu·ªói JSON qua WebSocket.
 */
export function sendMessage(messageObject) {
    if (mainSocket && mainSocket.readyState === WebSocket.OPEN) {
        mainSocket.send(JSON.stringify(messageObject));
        console.log(" G·ª≠i t·ªõi server:", messageObject);
        return true;
    }
    if (!mainSocket || mainSocket.readyState === WebSocket.CLOSED) {
        connectMainSocket();
    }
    console.warn(" Socket ch∆∞a m·ªü, th√™m v√†o h√†ng ch·ªù:", messageObject);
    pendingMessages.push(messageObject);
    return false;
}

/**
 * ƒêƒÉng k√Ω h√†m x·ª≠ l√Ω cho m·ªôt lo·∫°i tin nh·∫Øn c·ª• th·ªÉ.
 */
export function registerHandler(type, handlerFunction) {
    if (messageHandlers[type]) {
        console.warn(`[Socket] Ghi ƒë√® handler cho type: ${type}`);
    }
    messageHandlers[type] = handlerFunction;
}

/**
 * ‚úÖ H√ÄM N·ªòI B·ªò: ƒêi·ªÅu ph·ªëi tin nh·∫Øn
 * (H√†m n√†y m√† b·∫°n ƒë√£ thi·∫øu ·ªü l∆∞·ª£t tr∆∞·ªõc)
 */
function handleMessage(msg) {
    if (msg.type && messageHandlers[msg.type]) {
        messageHandlers[msg.type](msg);
    } else {
        console.warn(`[Socket] Kh√¥ng t√¨m th·∫•y h√†m x·ª≠ l√Ω cho tin nh·∫Øn lo·∫°i: ${msg.type}`);
    }
}