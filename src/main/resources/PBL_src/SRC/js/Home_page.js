// File: Home_page.js
import {sendMessage} from "./Connect_websocket.js";

// L·∫•y playerName t·ª´ localStorage
let playerName = localStorage.getItem("playerName") || "Guest";

// C√°c h√†m ƒë·ªïi Theme (Gi·ªØ nguy√™n)
const boardEl = document.getElementById('chessBoard');


//L·∫•y popup gh√©p tr·∫≠n
const matchmakingOverlay = document.getElementById('matchmaking-overlay');
const cancelMatchmakingBtn = document.getElementById('cancelMatchmakingBtn');
const matchmakingTimerEl = document.getElementById('matchmaking-timer');
const gameOverOverlay = document.getElementById('game-over-overlay');
const gameOverTitleEl = document.getElementById('gameOverTitle');
const gameOverReasonEl = document.getElementById('gameOverReason');
const findNewBtn = document.getElementById('gameOverFindNewBtn');
const rematchBtn = document.getElementById('gameOverRematchBtn');
const leaveBtn = document.getElementById('gameOverLeaveBtn');
const confirmationOverlay = document.getElementById('confirmation-overlay');
const confirmTitleEl = document.getElementById('confirmTitle');
const confirmMessageEl = document.getElementById('confirmMessage');
const confirmBtnYes = document.getElementById('confirmBtnYes');
const confirmBtnNo = document.getElementById('confirmBtnNo');

let matchmakingIntervalId = null; // ID ƒë·ªÉ d·ª´ng setInterval
let matchmakingStartTime = 0;   // Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu t√¨m tr·∫≠n

// Bi·∫øn l∆∞u tr·ªØ HTML g·ªëc
let originalModesHTML = '';
const rightPanel = document.querySelector('.right-panel');


// == C√ÅC H√ÄM T·∫†O VIEW (L·∫§Y T·ª™ game_controller.js) ==

function getLobbyHTML() {
    return `
    <div class="online-wrapper">
        <button id="backToModes" class="btn-back">‚Üê</button>
        <div style="font-weight:700; font-size:18px; text-align:center; margin-bottom:10px;">Ch∆°i tr·ª±c tuy·∫øn</div>
        <div class="muted" style="text-align:center; margin-bottom:20px;">K·∫øt n·ªëi v·ªõi ƒë·ªëi th·ªß kh√°c</div>
        
        <button id="createRoomBtn" class="btnn" disabled>T·∫°o ph√≤ng</button>
        <input id="joinRoomIdInput" class="input" placeholder="Nh·∫≠p m√£ ph√≤ng...">
        <button id="joinRoomBtn" class="btnn" disabled>Tham gia ph√≤ng</button>
        <button id="matchmakingBtn" class="btnn" disabled>Gh√©p tr·∫≠n ng·∫´u nhi√™n</button>
        
        <div id="lobbyStatus" class="status-lobby">ƒêang ch·ªù k·∫øt n·ªëi...</div>
    </div>`;
}

// H√†m hi·ªÉn th·ªã popup
function showMatchmakingPopup() {
    if (matchmakingOverlay) {
        matchmakingOverlay.classList.remove('hidden');
    }
    startMatchmakingTimer();
    // G·∫Øn s·ª± ki·ªán H·ªßy (ch·ªâ g·∫Øn 1 l·∫ßn)
    if (cancelMatchmakingBtn) {
        // X√≥a listener c≈© tr∆∞·ªõc khi th√™m m·ªõi (ƒë·ªÅ ph√≤ng)
        cancelMatchmakingBtn.removeEventListener('click', handleCancelMatchmaking);
        cancelMatchmakingBtn.addEventListener('click', handleCancelMatchmaking, { once: true }); // Ch·ªâ ch·∫°y 1 l·∫ßn
    }
}

// H√†m ·∫©n popup
function hideMatchmakingPopup() {
    if (matchmakingOverlay) {
        matchmakingOverlay.classList.add('hidden');
    }
    stopMatchmakingTimer();
}
// G·∫Øn v√†o window ƒë·ªÉ game_controller c√≥ th·ªÉ g·ªçi
window.hideMatchmakingPopup = hideMatchmakingPopup;

// H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t H·ªßy
function handleCancelMatchmaking() {
    hideMatchmakingPopup();
    stopMatchmakingTimer();
    // G·ª≠i tin nh·∫Øn h·ªßy l√™n server (B·∫†N C·∫¶N TH√äM LOGIC X·ª¨ L√ù ·ªû SERVER)
    sendMessage({ type: "cancel_matchmaking" });

    // C√≥ th·ªÉ c·∫ßn k√≠ch ho·∫°t l·∫°i n√∫t "Gh√©p tr·∫≠n" trong Lobby View
    const matchmakingBtnInLobby = rightPanel.querySelector('#matchmakingBtn');
    if (matchmakingBtnInLobby) {
        matchmakingBtnInLobby.disabled = false;
        matchmakingBtnInLobby.textContent = "Gh√©p tr·∫≠n ng·∫´u nhi√™n";
    }
}

function getGameControlsHTML() {
    return `
    <div class="game-controls-wrapper">
        <div class="status" id="gameStatus">ƒêang ch·ªù ƒë·ªëi th·ªß...</div>
        <div id="playerInfoBar">
            <div>Ph√≤ng: <span id="roomInfoEl">-</span></div>
            <div>M√†u: <span id="colorInfoEl">-</span></div>
        </div>
        <div id="chatSection" class="chat-section">
            <div style="font-weight:700; margin-bottom:5px;">Tr√≤ chuy·ªán</div>
            <div id="chatMessagesEl" class="chat-messages"></div>
            <div class="chat-input-area">
                <input id="chatInputEl" class="input" placeholder="Nh·∫Øn tin...">
                <button id="chatSendBtnEl" class="btn-chat">G·ª≠i</button>
            </div>
        </div>
        <div id="moveListContainer" class="move-list-section">
            <div style="font-weight:600; margin-bottom: 5px;">L·ªãch s·ª≠ n∆∞·ªõc ƒëi:</div>
            <ul id="moveList"></ul>
        </div>
        <div class="game-actions">
            <button id="drawRequestBtn" class="btn-action">C·∫ßu h√≤a</button>
            <button id="resignBtn" class="btn-action btn-warning">ƒê·∫ßu h√†ng</button>
            <button id="exitRoomBtn" class="btn-action btn-danger">Tho√°t ph√≤ng</button>
        </div>
    </div>`;
}

// == C√ÅC H√ÄM HI·ªÇN TH·ªä VIEW ==

function showModesView() {
    if (rightPanel) rightPanel.innerHTML = originalModesHTML;
    // T√πy ch·ªçn: G·ª≠i tin nh·∫Øn ng·∫Øt k·∫øt n·ªëi
    // sendMessage({ type: "disconnect" });
}

function showConfirmationPopup(title, message) {
    return new Promise((resolve) => {
        if (!confirmationOverlay || !confirmTitleEl || !confirmMessageEl || !confirmBtnYes || !confirmBtnNo) {
            // Fallback d√πng confirm() n·∫øu element b·ªã thi·∫øu
            resolve(confirm(`${title}\n${message}`));
            return;
        }

        // C·∫≠p nh·∫≠t n·ªôi dung popup
        confirmTitleEl.textContent = title;
        confirmMessageEl.textContent = message;

        // X√≥a listener c≈© tr∆∞·ªõc khi g√°n m·ªõi (quan tr·ªçng!)
        confirmBtnYes.onclick = null;
        confirmBtnNo.onclick = null;

        // G√°n s·ª± ki·ªán cho n√∫t
        confirmBtnYes.onclick = () => {
            confirmationOverlay.classList.add('hidden');
            resolve(true); // Tr·∫£ v·ªÅ true khi ƒë·ªìng √Ω
        };
        confirmBtnNo.onclick = () => {
            confirmationOverlay.classList.add('hidden');
            resolve(false); // Tr·∫£ v·ªÅ false khi h·ªßy
        };

        // Hi·ªÉn th·ªã popup
        confirmationOverlay.classList.remove('hidden');
    });
}

function showLobbyView() {
    if (rightPanel) rightPanel.innerHTML = getLobbyHTML();
    // K√≠ch ho·∫°t k·∫øt n·ªëi
    sendMessage({
        type: "connect",
        playerName: playerName,
        playerId: localStorage.getItem("playerId") // G·ª≠i c·∫£ ID (n·∫øu c√≥)
    });
}

window.showGameOverPopup = function(result, reason) {
    if (!gameOverOverlay || !gameOverTitleEl || !gameOverReasonEl || !findNewBtn || !rematchBtn || !leaveBtn) {
        console.error("Kh√¥ng t√¨m th·∫•y c√°c element c·ªßa popup Game Over!");
        // Fallback d√πng alert
        alert(`K·∫øt qu·∫£: ${result} - L√Ω do: ${reason || 'K·∫øt th√∫c tr·∫≠n'}`);
        return;
    }

    // --- C·∫≠p nh·∫≠t n·ªôi dung ---
    switch (result) {
        case 'win':
            gameOverTitleEl.textContent = 'üéâ Chi·∫øn th·∫Øng!';
            gameOverTitleEl.style.color = '#4CAF50'; // M√†u xanh l√°
            break;
        case 'loss':
            gameOverTitleEl.textContent = 'Th·∫•t b·∫°i!';
            gameOverTitleEl.style.color = '#F44336'; // M√†u ƒë·ªè
            break;
        case 'draw':
        default:
            gameOverTitleEl.textContent = 'H√≤a c·ªù!';
            gameOverTitleEl.style.color = '#FFC107'; // M√†u v√†ng
            break;
    }
    gameOverReasonEl.textContent = reason || ''; // Hi·ªÉn th·ªã l√Ω do ho·∫∑c ƒë·ªÉ tr·ªëng

    // --- G·∫Øn s·ª± ki·ªán cho c√°c n√∫t ---

    // N√∫t T√¨m tr·∫≠n m·ªõi: G·ªçi h√†m findNewGame t·ª´ game_controller
    findNewBtn.onclick = () => {
        gameOverOverlay.classList.add('hidden'); // ·∫®n popup
        if (window.findNewGame) {
            window.findNewGame(); // G·ªçi h√†m t√¨m tr·∫≠n m·ªõi
            // Chuy·ªÉn v·ªÅ m√†n h√¨nh Lobby (quan tr·ªçng)
            showLobbyView();
        } else {
            console.error("Kh√¥ng t√¨m th·∫•y h√†m window.findNewGame!");
        }
    };

    // N√∫t T√°i ƒë·∫•u: G·ª≠i y√™u c·∫ßu l√™n server
    rematchBtn.onclick = () => {
        gameOverOverlay.classList.add('hidden'); // ·∫®n popup
        if (window.requestRematch) {
            window.requestRematch(); // G·ªçi h√†m g·ª≠i y√™u c·∫ßu t√°i ƒë·∫•u
            // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o "ƒê√£ g·ª≠i y√™u c·∫ßu t√°i ƒë·∫•u"
            alert("ƒê√£ g·ª≠i y√™u c·∫ßu t√°i ƒë·∫•u!");
        } else {
            console.error("Ch∆∞a c√≥ h√†m window.requestRematch!");
            // T·∫°m th·ªùi ch·ªâ quay l·∫°i lobby
            showLobbyView();
        }
    };

    // N√∫t Tho√°t: Quay v·ªÅ m√†n h√¨nh ch·ªçn ch·∫ø ƒë·ªô
    leaveBtn.onclick = () => {
        gameOverOverlay.classList.add('hidden'); // ·∫®n popup
        showModesView(); // Quay v·ªÅ m√†n h√¨nh ch·ªçn ch·∫ø ƒë·ªô ch∆°i
    };

    // --- Hi·ªÉn th·ªã popup ---
    gameOverOverlay.classList.remove('hidden');
}

// ‚úÖ G·∫Øn h√†m n√†y v√†o 'window' ƒë·ªÉ game_controller c√≥ th·ªÉ g·ªçi n√≥
window.showGameControlsView = function() {
    if (rightPanel) rightPanel.innerHTML = getGameControlsHTML();

    const chatSendBtn = document.getElementById('chatSendBtnEl');
    if (chatSendBtn && window.sendChat) chatSendBtn.addEventListener('click', window.sendChat);

    const chatInput = document.getElementById('chatInputEl');
    if (chatInput && window.sendChat) chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') window.sendChat();
    });
}

function startMatchmakingTimer() {
    matchmakingStartTime = Date.now(); // Ghi l·∫°i th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu
    if (matchmakingTimerEl) matchmakingTimerEl.textContent = '00:00'; // Reset hi·ªÉn th·ªã

    // D·ª´ng interval c≈© n·∫øu c√≥
    if (matchmakingIntervalId) clearInterval(matchmakingIntervalId);

    // C·∫≠p nh·∫≠t ƒë·ªìng h·ªì m·ªói gi√¢y
    matchmakingIntervalId = setInterval(() => {
        const elapsedTime = Math.floor((Date.now() - matchmakingStartTime) / 1000); // Gi√¢y ƒë√£ tr√¥i qua
        const minutes = String(Math.floor(elapsedTime / 60)).padStart(2, '0');
        const seconds = String(elapsedTime % 60).padStart(2, '0');
        if (matchmakingTimerEl) {
            matchmakingTimerEl.textContent = `${minutes}:${seconds}`;
        }
    }, 1000);
}

// ‚úÖ H√ÄM D·ª™NG ƒê·ªíNG H·ªí
function stopMatchmakingTimer() {
    if (matchmakingIntervalId) {
        clearInterval(matchmakingIntervalId); // D·ª´ng c·∫≠p nh·∫≠t
        matchmakingIntervalId = null;
    }
    // C√≥ th·ªÉ reset text ho·∫∑c ƒë·ªÉ nguy√™n gi√° tr·ªã cu·ªëi
    // if (matchmakingTimerEl) matchmakingTimerEl.textContent = '00:00';
}

// == KH·ªûI T·∫†O ==
document.addEventListener('DOMContentLoaded', function () {
    if (!rightPanel) {
        console.error("Kh√¥ng t√¨m th·∫•y '.right-panel'");
        return;
    }
    anime({
        targets: '.ml1 .letter', // Ch·ªçn t·∫•t c·∫£ c√°c ch·ªØ c√°i
        opacity: [0, 1],         // Chuy·ªÉn t·ª´ m·ªù (0) sang r√µ (1)
        translateY: [20, 0],     // Di chuy·ªÉn t·ª´ d∆∞·ªõi l√™n (20px -> 0px)
        easing: "easeOutExpo",   // Ki·ªÉu chuy·ªÉn ƒë·ªông m∆∞·ª£t m√†
        duration: 1400,          // T·ªïng th·ªùi gian animation
        delay: anime.stagger(100) // M·ªói ch·ªØ c√°i tr·ªÖ 100ms so v·ªõi ch·ªØ tr∆∞·ªõc
        // delay: (el, i) => 70 * i // C√°ch vi·∫øt delay kh√°c, t∆∞∆°ng t·ª± stagger
    });
    // L∆∞u l·∫°i HTML ban ƒë·∫ßu
    originalModesHTML = rightPanel.innerHTML;

    // S·ª≠ d·ª•ng ·ª¶y quy·ªÅn s·ª± ki·ªán (Event Delegation)
    rightPanel.addEventListener('click', async function (event) {

        // 1. Click "Ch∆°i tr·ª±c tuy·∫øn"
        const onlineModeBtn = event.target.closest('.mode[data-mode="online"]');
        if (onlineModeBtn) {
            showLobbyView();
            return;
        }

        // 2. Click "Back"
        const backBtn = event.target.closest('#backToModes');
        if (backBtn) {
            showModesView();
            return;
        }

        // 3. Click "T·∫°o ph√≤ng"
        const createRoomBtn = event.target.closest('#createRoomBtn');
        if (createRoomBtn && window.createRoom) {
            window.createRoom(); // G·ªçi h√†m t·ª´ game_controller
            return;
        }

        // 4. Click "Tham gia ph√≤ng"
        const joinRoomBtn = event.target.closest('#joinRoomBtn');
        if (joinRoomBtn && window.joinRoom) {
            window.joinRoom(); // G·ªçi h√†m t·ª´ game_controller
            return;
        }

        // 5. Click "Gh√©p tr·∫≠n"
        const matchmakingBtn = event.target.closest('#matchmakingBtn');
        if (matchmakingBtn && window.findNewGame) {

            // ‚úÖ HI·ªÇN TH·ªä POPUP TR∆Ø·ªöC KHI G·ª¨I Y√äU C·∫¶U
            showMatchmakingPopup();

            // V√¥ hi·ªáu h√≥a n√∫t v√† ƒë·ªïi text (c√≥ th·ªÉ l√†m trong showMatchmakingPopup)
            matchmakingBtn.disabled = true;

            matchmakingBtn.textContent = "ƒêang t√¨m...";

            window.findNewGame(); // G·ªçi h√†m g·ª≠i y√™u c·∫ßu gh√©p tr·∫≠n
            return;
        }
        // 6. Click "C·∫ßu h√≤a" (#drawRequestBtn trong Game View)
        const drawBtn = event.target.closest('#drawRequestBtn');
        if (drawBtn && window.requestDraw) {
            // ‚úÖ HI·ªÇN TH·ªä POPUP X√ÅC NH·∫¨N T√ôY CH·ªàNH
            const confirmed = await showConfirmationPopup(
                "X√°c nh·∫≠n C·∫ßu h√≤a",
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ª≠i l·ªùi ƒë·ªÅ ngh·ªã h√≤a ƒë·∫øn ƒë·ªëi th·ªß?"
            );
            if (confirmed) {
                console.log("ƒê√£ g·ª≠i c·∫ßu h√≤a");
                window.requestDraw(); // Ch·ªâ g·ªçi n·∫øu nh·∫•n ƒê·ªìng √Ω
            }
            return;
        }

        // 7. Click "ƒê·∫ßu h√†ng" (#resignBtn trong Game View)
        const resignBtn = event.target.closest('#resignBtn');
        if (resignBtn && window.resignGame) {
            // ‚úÖ HI·ªÇN TH·ªä POPUP X√ÅC NH·∫¨N T√ôY CH·ªàNH
            const confirmed = await showConfirmationPopup(
                "X√°c nh·∫≠n ƒê·∫ßu h√†ng",
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫ßu h√†ng tr·∫≠n ƒë·∫•u n√†y kh√¥ng?"
            );
            if (confirmed) {
                window.resignGame(); // Ch·ªâ g·ªçi n·∫øu nh·∫•n ƒê·ªìng √Ω
            }
            return;
        }

        // 8. Click "Tho√°t ph√≤ng" (#exitRoomBtn trong Game View)
        const exitBtn = event.target.closest('#exitRoomBtn');
        if (exitBtn) {
            // ‚úÖ HI·ªÇN TH·ªä POPUP X√ÅC NH·∫¨N T√ôY CH·ªàNH
            const confirmed = await showConfirmationPopup(
                "X√°c nh·∫≠n Tho√°t ph√≤ng",
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t kh·ªèi ph√≤ng? (N·∫øu ƒëang ch∆°i, b·∫°n s·∫Ω b·ªã x·ª≠ thua)."
            );
            if (confirmed) {
                if (window.leaveRoom) {
                    window.leaveRoom(); // G·ª≠i tin nh·∫Øn r·ªùi ph√≤ng
                }
                showModesView(); // Quay v·ªÅ m√†n h√¨nh ch·ªçn ch·∫ø ƒë·ªô
            }
            return;
        }
    });
});