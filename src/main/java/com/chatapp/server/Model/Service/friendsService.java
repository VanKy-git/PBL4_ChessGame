package com.chatapp.server.Model.Service;

import com.chatapp.server.Model.DAO.friendsDAO;
import com.chatapp.server.Model.Entity.friends;
import com.chatapp.server.Model.Entity.user;

import java.time.LocalDateTime;
import java.util.List;

/**
 * friendsService - X·ª≠ l√Ω nghi·ªáp v·ª• b·∫°n b√® (friendship).
 *
 * üí° T·∫ßng n√†y KH√îNG l√†m vi·ªác tr·ª±c ti·∫øp v·ªõi EntityManager.
 * üí° Kh√¥ng commit / rollback transaction.
 * üí° Ch·ªâ ch·ª©a logic x·ª≠ l√Ω nghi·ªáp v·ª• (ki·ªÉm tra, x√°c th·ª±c, tr·∫°ng th√°i...).
 */
public class friendsService {

    public final friendsDAO dao;

    public friendsService(friendsDAO dao) {
        this.dao = dao;
    }

    /**
     * G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
     * @param sender ng∆∞·ªùi g·ª≠i
     * @param receiver ng∆∞·ªùi nh·∫≠n
     */
    public boolean sendFriendRequest(user sender, user receiver) {
        // Kh√¥ng th·ªÉ t·ª± g·ª≠i l·ªùi m·ªùi cho ch√≠nh m√¨nh
        if (sender.getUserId() == receiver.getUserId()) {
            throw new IllegalArgumentException("Kh√¥ng th·ªÉ t·ª± k·∫øt b·∫°n v·ªõi ch√≠nh m√¨nh!");
        }

        // Ki·ªÉm tra ƒë√£ c√≥ quan h·ªá b·∫°n b√® ho·∫∑c y√™u c·∫ßu ch·ªù tr∆∞·ªõc ƒë√≥ ch∆∞a
        List<friends> existing = dao.getFriendsOfUser(sender.getUserId());
        boolean alreadyExists = existing.stream().anyMatch(f ->
                (f.getUser1().equals(sender) && f.getUser2().equals(receiver)) ||
                        (f.getUser1().equals(receiver) && f.getUser2().equals(sender))
        );
        if (alreadyExists) {
            throw new RuntimeException("Y√™u c·∫ßu k·∫øt b·∫°n ƒë√£ t·ªìn t·∫°i ho·∫∑c hai ng∆∞·ªùi ƒë√£ l√† b·∫°n b√®!");
        }

        // T·∫°o l·ªùi m·ªùi m·ªõi
        friends f = new friends();
        f.setUser1(sender);
        f.setUser2(receiver);
        f.setStatus("PENDING");
        f.setCreatedAt(LocalDateTime.now());

        dao.addFriendRequest(sender.getUserId(), receiver.getUserId());
        return true;
    }

    /**
     * L·∫•y danh s√°ch b·∫°n b√® ho·∫∑c y√™u c·∫ßu c·ªßa m·ªôt ng∆∞·ªùi
     */
    public List<friends> getFriendsOfUser(int userId) {
        return dao.getFriendsOfUser(userId);
    }

    /**
     * Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
     */
    public boolean acceptFriendRequest(int friendshipId) {
        friends f = dao.getFriendById(friendshipId);
        if (f == null || !"PENDING".equals(f.getStatus())) return false;

        f.setStatus("ACCEPTED");
        dao.updateFriend(f);
        return true;
    }

    /**
     * T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
     */
    public boolean rejectFriendRequest(int friendshipId) {
        friends f = dao.getFriendById(friendshipId);
        if (f == null || !"PENDING".equals(f.getStatus())) return false;

        f.setStatus("REJECTED");
        dao.updateFriend(f);
        return true;
    }

    /**
     * X√≥a b·∫°n b√®
     */
    public boolean deleteFriendship(int friendshipId) {
        friends f = dao.getFriendById(friendshipId);
        if (f == null) return false;

        dao.deleteFriendship(friendshipId);
        return true;
    }
}
