package com.chatapp.server.Test;

import com.chatapp.server.Controller.roomController;
import com.chatapp.server.Model.DAO.roomDAO.RoomWithPlayer;
import com.chatapp.server.Model.DAO.roomDAO.RoomStatistics;
import com.chatapp.server.Model.Entity.DBConnection;
import com.chatapp.server.Model.Entity.room;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.Arrays;

public class RoomTest {

    public static void main(String[] args) {
        // Ki·ªÉm tra k·∫øt n·ªëi DB
        try (Connection conn = DBConnection.getConnection()) {
            System.out.println("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng: " + conn.getMetaData().getURL());
        } catch (SQLException e) {
            System.err.println("‚ùå K·∫øt n·ªëi database th·∫•t b·∫°i: " + e.getMessage());
            return;
        }

        // T·∫°o controller
        roomController controller = new roomController();
        Gson gson = new Gson();

        try {
            // ====== TEST 1: T·∫°o ph√≤ng m·ªõi ======
//            System.out.println("\nüß© Test 1: T·∫°o ph√≤ng m·ªõi");
//            JsonObject createRequest = new JsonObject();
//            createRequest.addProperty("hostId", 97); // ID user host
//            String createResponseJson = controller.handleRequest("createRoom", createRequest.toString());
//            JsonObject createResponse = gson.fromJson(createResponseJson, JsonObject.class);
//
 //           RoomWithPlayer room = null;
//            if (createResponse.get("success").getAsBoolean()) {
//                room = gson.fromJson(createResponse.get("data"), RoomWithPlayer.class);
//                System.out.println("‚úÖ T·∫°o ph√≤ng th√†nh c√¥ng: Room#" + room.roomId);
//            } else {
//                System.out.println("‚ùå T·∫°o ph√≤ng th·∫•t b·∫°i: " + createResponse.get("error").getAsString());
//            }

            //if (room != null) {
                // ====== TEST 2: Tham gia ph√≤ng ======
                System.out.println("\nüß© Test 2: Tham gia ph√≤ng");
                JsonObject joinRequest = new JsonObject();
                joinRequest.addProperty("roomId", 13);
                joinRequest.addProperty("guestId", 2); // ID user guest
                String joinResponseJson = controller.handleRequest("joinRoom", joinRequest.toString());
                JsonObject joinResponse = gson.fromJson(joinResponseJson, JsonObject.class);
                System.out.println(joinResponse.get("success").getAsBoolean() ?
                        "‚úÖ User tham gia ph√≤ng th√†nh c√¥ng" :
                        "‚ùå Tham gia ph√≤ng th·∫•t b·∫°i: " + joinResponse.get("error").getAsString());

                // ====== TEST 3: L·∫•y ph√≤ng theo user ======
                System.out.println("\nüß© Test 3: L·∫•y ph√≤ng theo userId");
                JsonObject getUserRoomsReq = new JsonObject();
                getUserRoomsReq.addProperty("userId", 1);
                String roomsByUserJson = controller.handleRequest("getRoomsByUserId", getUserRoomsReq.toString());
                JsonObject roomsByUserResp = gson.fromJson(roomsByUserJson, JsonObject.class);
                if (roomsByUserResp.get("success").getAsBoolean()) {
                    RoomWithPlayer[] rooms = gson.fromJson(roomsByUserResp.get("data"), RoomWithPlayer[].class);
                    System.out.println("User 1 ƒëang ·ªü c√°c ph√≤ng: " + Arrays.toString(Arrays.stream(rooms)
                            .map(r -> r.roomId + "(" + r.roomStatus + ")").toArray()));
                }

                // ====== TEST 4: Quick Match ======
                System.out.println("\nüß© Test 4: Quick Match cho user 3");
                JsonObject quickMatchReq = new JsonObject();
                quickMatchReq.addProperty("userId", 3);
                String quickMatchRespJson = controller.handleRequest("quickMatch", quickMatchReq.toString());
                JsonObject quickMatchResp = gson.fromJson(quickMatchRespJson, JsonObject.class);
                System.out.println(quickMatchResp.get("success").getAsBoolean() ?
                        "‚úÖ Quick match th√†nh c√¥ng" :
                        "‚ùå Quick match th·∫•t b·∫°i: " + quickMatchResp.get("error").getAsString());

                // ====== TEST 5: Th·ªëng k√™ ======
                System.out.println("\nüß© Test 5: Th·ªëng k√™ ph√≤ng");
                String statsJson = controller.handleRequest("getRoomStatistics", "{}");
                JsonObject statsResp = gson.fromJson(statsJson, JsonObject.class);
                if (statsResp.get("success").getAsBoolean()) {
                    RoomStatistics stats = gson.fromJson(statsResp.get("data"), RoomStatistics.class);
                    System.out.printf("T·ªïng s·ªë ph√≤ng: %d | Waiting: %d | Active: %d | Closed: %d\n",
                            stats.totalRooms, stats.waitingRooms, stats.activeRooms, stats.closedRooms);
                }

                // ====== TEST 6: ƒê√≥ng ph√≤ng ======
                System.out.println("\nüß© Test 6: ƒê√≥ng ph√≤ng Room#13");
                JsonObject closeReq = new JsonObject();
                closeReq.addProperty("roomId", 13);
                String closeRespJson = controller.handleRequest("closeRoom", closeReq.toString());
                JsonObject closeResp = gson.fromJson(closeRespJson, JsonObject.class);
                System.out.println(closeResp.get("success").getAsBoolean() ?
                        "‚úÖ ƒê√≥ng ph√≤ng th√†nh c√¥ng" :
                        "‚ùå ƒê√≥ng ph√≤ng th·∫•t b·∫°i: " + closeResp.get("error").getAsString());
            //}

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói trong qu√° tr√¨nh test: " + e.getMessage());
            e.printStackTrace();
        } finally {
            DBConnection.close();
            System.out.println("\nüßπ ƒê√£ ƒë√≥ng pool k·∫øt n·ªëi.");
        }
    }
}
